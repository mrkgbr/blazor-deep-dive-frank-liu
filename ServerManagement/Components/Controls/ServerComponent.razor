@inject NavigationManager NavigationManager

@if (Server != null)
{
    <li @key="@Server.ServerId">
        @Server.Name in @Server.City is
        <span style="color:@(Server.IsOnline ? "green" : "red");">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        <a class="btn btn-link" href="/servers/@Server.ServerId">Edit</a>
        &nbsp;
        @if (Server.IsOnline)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="@(() => {Server.IsOnline = false;})">Turn
                off</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-success" @onclick="@(() => {Server.IsOnline = true;})">Turn on</button>
        }
        &nbsp;
        <EditForm Model="Server" FormName="@($"form-server-{Server.ServerId}")"
            OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
            <button type="submit" class="btn btn-danger">Delete</button>
        </EditForm>
    </li>
}

@code {
    [Parameter]
    public Server? Server { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.Refresh(true);
        }
    }
}

using System.Diagnostics.Eventing.Reader;

#line default
#line hidden
#nullable disable
